# 4장 변수

## 4.1 변수란 무엇인가?

### 변수 )

: 프로그래밍 언어에서 데이터를 관리하기 위한 핵심 개념

프로그래밍 언어는 기억하고 싶은 값을 메모리에 저장하고 저장된 값을 읽어 재사용 하기 위해

변수라는 메커니즘을 제공한다.

### <변수> Variable

: 하나의 값을 저장하기 우해 확보한 메모리 공간 자체, 또는 그 공간을 식별하기 위해 붙인 이름

### 변수에 여러개의 값을 저장하는 방법 )

여러개의 값을 저장하기 위해서는 여러개의 변수를 사용해야 한다.

배열이나 객체 같은 자료구조 할용 시 여러 값을 그룹화 하여 하나의 값처럼 사용 가능

```jsx
var userId = 1;

// 객체
var user = { id : 1, name : 'Lee' };
// 배열
var users = [ 
             { id : 1, name : 'Lee'}, 
             { id : 2, name : 'Gee'},
            ];
            
```

```jsx
// 저장된 메모리 공간의 상징적인 이름
var result = 10 + 20;
```

- 변수명 : 메모리 공간에 저장된 값을 식별할 수 있는 고유한 이름
- 변수값 : 변수에 저장된 값
- 변수에 값 저장 → 할당, 대입 ( assignment )
- 참조 : 변수의 값을 읽어들이는 것

!! 좋은 변수의 이름은 저장된 값의 의미를 파악할 수 있는 부수적 효과가 있음

---

## 4.2 식별자

- 식별자( identifier )
    - 어떤 값을 구별해서 식별할 수 있는 고유한 이름
        - 값이 저장되어 있는 메모리 주소와 매핑관계를 맺음
        - 값이 아닌 메모리 주소를 저장

---

## 4.3 변수선언 (Variable declaration)

- 변수를 생성하는 행위
- 값을 저장하기 위한 메모리 공간 확보, 변수명과 메모리 공간의 주소 연결
- 변수 선언 키워드 ( var, let, const )

```jsx
var score; // 변수 선언
```

- **var 키워드의 단점**
    - 블록레벨 스코프 미지원
    - 함수 레벨 스코프만 지원

- 키워드 : JS 엔진이 수행할 동작을 규정하는 명령어
- 변수 선언 시 값을 할당하지 않으면 원시타입의 값 undefined 가 저장된다.

- **변수 선언의 2단계 )**
    - 선언 단계 : 변수의 이름을 등록해서 자바스크립트 엔진에 존재를 알린다
    - 초기화 단계 : 값을 저장하기 위한 메모리 공간 확보 암묵적으로 undefined 할당

- **변수 이름의 등록 공간 )**
    - 실행 컨텍스트 : Js 엔진이 소스코드를 평가하고 필요한 환경을 제공, 코드 실행결과를 실제로 관리하는 영역
        - 이름 / 값이 Key / Value 형식으로 등록되어 관리

- 선언하지 않은 식별자에 접근 시 ReferenceError ( 참조 에러 ) 가 발생한다.

---

## 4.4 변수 선언의 실행 시점과 변수 호이스팅

- 자바스크립트 코드 → 인터프리터에 의해 한줄 씩 실행

- **변수 선언은 소스코드가 한줄 씩 순차적으로 실행되는 시점, 런타임이 아닌 그 이전 단계에서 먼저 실행**
- **호이스팅**
    - 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는  Js 고유의 특징

```jsx
console.log(score); // undefined

var score; // 변수 선언 문

// 참조 에러가 발생하지 않는다. 변수선언이 런타임 이전에 수행되므로.
```

---

## 4.5 값의 할당

- **할당 연산자 ( = )**
    - 우변의 값을 좌변의 변수에 할당한다.

```jsx
var score;  // 변수 선언
score = 80; //값의 할당

var score = 80; 단축 표현 가능
```

- **변수 선언 → 런타임 이전 실행**
- **값의 할당 → 소스코드가 순차적으로 실행되는 런타임에 실행**

```jsx
console.log(score);

score = 80;
var score; 

console.log(score);

// undefined
// 80
```

---

## 4.6 값의 재할당

- 재할당 : 이미 값이 할당 되어 있는 변수에 새로운 값을 또 다시 할당하는 것
- 상수 ( constant ) : 값을 재할당 할 수 없어서 변수에 저장된 값을 변경할 수 없는 경우

```jsx
const name = 'Lee'; // 재할당 불가
```

- 재할당 시 새로운 메모리 공간을 확보 → 새 변수의 값을 저장한다.
- 불필요 값은 가비지 콜렉터에 의해 메모리에 해제된다.

---

## 4.7 식별자 네이밍 규칙

- 특수문자 제외, 문자, 숫자, 언더 스코어 , 달러 ($) 포함 가능
- 숫자로 시작하면 안됨
- 예약어는 식별자로 사용 불가

- 변수를 쉼표로 구분, 하나의 문에서 여러개 선언이 가능

```jsx
var a, b, c, d;
```

- 변수의 이름은 변수의 존재 목적을 쉽게 이해할 수 있도록 의미를 명확히 표현
- 일반적으로 변수나 함수의 이름에는 카멜케이스를 사용, 생성자 함수, 클래스의 이름에는 파스칼 케이스를 사용
